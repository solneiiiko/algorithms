#coding: utf-8
'''
Реализуйте структуру данных типа “множество строк” на основе динамической хеш-таблицы с открытой адресацией. Хранимые строки непустые и состоят из строчных латинских букв. Начальный размер таблицы должен быть равным 8-ми. Перехеширование выполняйте в случае, когда коэффициент заполнения таблицы достигает 3/4.

Структура данных должна поддерживать операции добавления строки в множество, удаления строки из множества и проверки принадлежности данной строки множеству.

Для разрешения коллизий используйте квадратичное пробирование. i-ая проба

g(k,i)=g(k,i−1)+i(modm)g(k,i)=g(k,i−1)+i(modm). m - степень двойки. 

Каждая строка входных данных задает одну операцию над множеством. Запись операции состоит из типа операции и следующей за ним через пробел строки, над которой проводится операция.

Тип операции  – один из трех символов:
   +  означает добавление данной строки в множество; 
   -  означает удаление  строки из множества;  
   ?  означает проверку принадлежности данной строки множеству.

При добавлении элемента в множество НЕ ГАРАНТИРУЕТСЯ, что он отсутствует в этом множестве. При удалении элемента из множества НЕ ГАРАНТИРУЕТСЯ, что он присутствует в этом множестве. 
Программа должна вывести для каждой операции одну из двух строк OK или FAIL, в зависимости от того, встречается ли данное слово в нашем множестве. 

Sample Input:
+ hello
+ bye
? bye
+ bye
- bye
? bye
? hello
Sample Output:
OK
OK
OK
FAIL
OK
FAIL
OK

Нажмите, чтобы начать решать
З
'''

class SetStr
  def initialized
    @set = []
    @size = 8
    @filling_coefficient = 0.75
  end

  def add(str)
    return false if self.find(str)
    index = self.h(str)
    @set[index] = str
    true
  end

  def del(str)
    return false unless self.find(str)
    index = self.h(str)
    @set[index] = nil
    true
  end

  def find(str)
    index = self.h(str)
    false
  end

  def h(str)
    0
  end
end


set = SetStr.new
while(input = gets.chomp)!=''
  oper, str = input.split(' ')
  puts str
end